{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"MkDocs + Material: Setup and Deployment on Ubuntu"},{"location":"#introduction","title":"\ud83d\ude80 Introduction","text":"<p>This guide walks you through setting up MkDocs with the Material for MkDocs theme on Ubuntu. You'll manage project dependencies using a Python virtual environment and automate site deployment to GitHub Pages via GitHub Actions.</p> <p>By the end, you\u2019ll have a fully functional documentation site \u2014 live, version-controlled, and ready to share.</p> <p>Note</p> <p>Note: This guide focuses on installation and basic project creation. For deeper customization of the Material theme, links to the official documentation are provided for further learning and advanced configuration.</p>"},{"location":"#intended-audience","title":"\ud83c\udfaf Intended Audience","text":"<p>This guide is aimed at new technical writers and developers on Ubuntu who want to create, configure, and deploy a documentation site using MkDocs and the Material for MkDocs theme.</p>"},{"location":"#pre-requisites","title":"\ud83e\uddf0 Pre-Requisites","text":"<p>To get the most out of this guide, you should be comfortable with:</p> <ul> <li>Command Line Interface (CLI): Running terminal commands.</li> <li>Git &amp; GitHub: Basic version control concepts and an active GitHub account.</li> <li>Python: Familiarity with Python and its package manager, <code>pip</code>.</li> <li>Visual Studio Code: Working knowledge of opening folders and using the terminal in VS Code.</li> </ul>"},{"location":"#navigation","title":"\ud83e\udded Navigation","text":"<p>This guide is divided into five sequential parts, as shown in the navigation pane. </p> <ol> <li>Initial System Setup</li> <li>Create Project Directory</li> <li>Install MkDocs &amp; Material</li> <li>Create and Configure the Project</li> <li>Deploy with GitHub Actions</li> </ol> <p>If you\u2019re a first-time user, follow the steps in order.Users who have previously completed the initial setup steps may proceed directly to the configuration or deployment sections as required.</p>"},{"location":"part1/","title":"Part 1: Initial System Setup","text":"<p>Before you begin installing MkDocs, it's a good practice to ensure your Ubuntu system is up to date and that you have the necessary core tools ready. </p> <p>You will perform all of the following steps in your terminal.</p>"},{"location":"part1/#1-update-and-upgrade-system-packages","title":"1. Update and Upgrade System Packages","text":"<p>First, update your system's package list and upgrade any outdated packages. This ensures you're working with the latest versions of system software, which can prevent conflicts.</p> <pre><code>sudo apt update &amp;&amp; sudo apt upgrade -y \n</code></pre>"},{"location":"part1/#2-verify-python-installation","title":"2. Verify Python Installation","text":"<p>MkDocs is a Python-based application, so you need to confirm that Python 3 is installed. </p> <pre><code>python3 --version\n</code></pre> <p>Ubuntu typically comes with Python pre-installed, but it's a good idea to verify the version.</p>"},{"location":"part1/#3-check-for-and-install-pip","title":"3. Check for and Install pip","text":"<p><code>pip</code> is the standard package installer for Python and is essential for installing MkDocs.Check if it's already on your system.</p> <p><pre><code>pip --version\n</code></pre> If <code>pip</code> is already installed, the command will display its version but, if you receive an error like \"command not found,\" you'll need to install it.</p> <p>Use the following command to install <code>pip</code> : </p> <pre><code>sudo apt install python3-pip -y\n</code></pre> <p>After installation, run <code>pip --version</code> again to confirm it's installed correctly.</p>"},{"location":"part1/#4-install-visual-studio-code","title":"4. Install Visual Studio Code","text":"<p>Visual Studio Code (VS Code) is used as the code editor  and terminal interface to work on the MkDocs project. </p> <p>If you don\u2019t have it installed already, download and install it from the official website: \ud83d\udc49 Download VS Code for Ubuntu</p> <p>After you install VS Code, verify the <code>code</code> command is available in your terminal by opening a new terminal and typing <code>code --version</code>.  If the command isn't found, you'll need to add it to your system's PATH.</p> Here's how: <ol> <li>Launch Visual Studio Code.</li> <li>Open the Command Palette by pressing <code>Ctrl+Shift+P</code>.</li> <li>Type <code>Shell Command: Install 'code' command in PATH</code>.</li> <li>Hit Enter to run the command. <p>This will allow you to use the <code>code .</code> command later in the tutorial.</p> </li> </ol> <p>With these foundational steps complete, your system is now ready for the MkDocs installation.</p> <p>\u2b05\ufe0f Previous: Home \u00a0\u00a0\u00a0\u00a0\u00a0 \u27a1\ufe0f Next: Create Project Directory</p>"},{"location":"part2/","title":"Part 2: Creating Your Project Directory","text":"<p>Now that your system is prepared, you can create a dedicated workspace for your MkDocs project. </p> <p>You will perform all of the following steps in your terminal.</p>"},{"location":"part2/#1-create-your-project-directory","title":"1. Create Your Project Directory","text":"<p>First, create a new directory for your project. </p> <pre><code>mkdir my_docs\n</code></pre> <p>You can substitute <code>my_docs</code> with any name of your choice.</p>"},{"location":"part2/#2-navigate-into-the-directory","title":"2. Navigate into the Directory","text":"<p>Next, move into the new directory you just created. </p> <pre><code>cd my_docs\n</code></pre>"},{"location":"part2/#3-open-the-workspace-in-vs-code","title":"3. Open the Workspace in VS Code","text":"<p>Finally, open your new project directory in VS Code.</p> <pre><code>code .\n</code></pre> <p>After running this command, VS Code will open with your new project folder, where you'll set up your environment and install MkDocs in the next part.</p> <p>\u2b05\ufe0f Previous: Initial System Setup\u00a0\u00a0\u00a0\u00a0\u00a0 \u27a1\ufe0f Next: Installing MkDocs and Material for MkDocs</p>"},{"location":"part3/","title":"Part 3: Installing MkDocs and Material for MkDocs","text":"<p>In this part, you'll create a virtual environment to manage project dependencies and install MkDocs along with the Material for MkDocs theme.</p> Why use a virtual environment? <p>It helps isolate your project\u2019s Python dependencies from other projects and system-wide packages, keeping things clean and manageable.</p>"},{"location":"part3/#1-open-the-integrated-terminal-in-vs-code","title":"1. Open the Integrated Terminal in VS Code","text":"<p>You can open the terminal inside VS Code in two ways:</p> <ol> <li>Use the shortcut: <code>Ctrl + `</code></li> <li>Or navigate to the menu: Terminal &gt; New Terminal</li> </ol> <p>This terminal will open in the context of your project folder, so any virtual environment or installation stays within this directory.</p>"},{"location":"part3/#2-create-and-activate-a-virtual-environment","title":"2. Create and Activate a Virtual Environment","text":"<p>Next, you will create a new virtual environment named <code>venv</code> that contains the isolated Python environment and activate it.</p> <pre><code># Create a new virtual environment named 'venv'.\npython3 -m venv venv\n\n# Activate the virtual environment.\nsource venv/bin/activate\n</code></pre> <p>You'll know the virtual environment is active when you see <code>(venv)</code> at the beginning of your terminal prompt.</p>"},{"location":"part3/#3-install-mkdocs-and-the-material-theme","title":"3. Install MkDocs and the Material Theme","text":"<p>With your virtual environment active, install the necessary packages using <code>pip</code>.</p> <pre><code># Installs MkDocs and the Material for MkDocs theme.\npip install mkdocs mkdocs-material\n</code></pre>"},{"location":"part3/#4-verify-the-installation","title":"4. Verify the Installation","text":"<p>After the installation is complete, confirm that both packages are present in your environment.</p> <pre><code># Lists all packages installed in the virtual environment.\npip list\n</code></pre> <p>You should see both mkdocs and mkdocs-material listed in the output like this: </p> <p>You have now successfully installed MkDocs and its theme. You're ready to create your first documentation project.</p> <p>\u2b05\ufe0f Previous: Create Project Directory \u00a0\u00a0\u00a0\u00a0\u00a0  \u27a1\ufe0f Next: Create and Configure the Project</p>"},{"location":"part4/","title":"Part 4: Create and Configure the Project","text":"<p>In this section, you will generate your MkDocs project files and configure the core settings that control how your documentation site looks and behaves.</p>"},{"location":"part4/#1-create-a-new-mkdocs-project","title":"1. Create a New MkDocs Project","text":"<p>With your virtual environment activated, run:</p> <pre><code># Creates a new MkDocs project in the current directory.  \nmkdocs new .\n</code></pre>"},{"location":"part4/#2-understand-the-mkdocsyml-file-and-project-structure","title":"2. Understand the <code>mkdocs.yml</code> File and Project Structure","text":"<p>After running <code>mkdocs new .</code> , two important components are created in your project directory:</p> <pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <p>Here's what each of them does:</p> <ul> <li>docs/: This folder contains your Markdown files. By default, it starts with an index.md, which is the homepage of your documentation site.</li> <li>index.md: A sample Markdown file where you can begin writing your content. MkDocs converts this into the homepage of your site.</li> <li>mkdocs.yml: This is the main configuration file for your MkDocs project. You'll use it to:<ul> <li>Set your site name</li> <li>Define navigation structure</li> <li>Choose and configure the theme</li> <li>Add plugins, extensions, and custom settings , etc.</li> </ul> </li> </ul>"},{"location":"part4/#3-install-the-yaml-language-support-extension","title":"3. Install the YAML Language Support Extension","text":"<p>To enable syntax validation and auto-completion for your mkdocs.yml file, install the YAML Language Support by Red Hat extension in VS Code.</p> <ol> <li>Open the Extensions view by clicking the Extensions icon on the Activity Bar or by pressing <code>Ctrl+Shift+X</code>.</li> <li>Search for YAML.</li> <li>Select the YAML Language Support by Red Hat extension and click Install.  <p></p> </li> </ol>"},{"location":"part4/#4-enable-schema-validation","title":"4. Enable Schema Validation","text":"<p>Once the extension is installed, you can link MkDocs to the YAML schema for better linting support.</p> <p>To do this:</p> <ol> <li>Open\u00a0<code>settings.json</code>\u00a0by clicking the\u00a0 gear\u00a0icon in the bottom left. </li> <li> <p>Next, click the\u00a0\u00a0 document\u00a0icon in the top right.</p> <p></p> </li> <li> <p>Add the following at the bottom of the <code>settings.json</code> file: settings.json<pre><code>{\n  \"yaml.schemas\": {\n    \"https://squidfunk.github.io/mkdocs-material/schema.json\": \"mkdocs.yml\"\n  },\n  \"yaml.customTags\": [ \n    \"!ENV scalar\",\n    \"!ENV sequence\",\n    \"!relative scalar\",\n    \"tag:yaml.org,2002:python/name:material.extensions.emoji.to_svg\",\n    \"tag:yaml.org,2002:python/name:material.extensions.emoji.twemoji\",\n    \"tag:yaml.org,2002:python/name:pymdownx.superfences.fence_code_format\",\n    \"tag:yaml.org,2002:python/object/apply:pymdownx.slugs.slugify mapping\"\n  ]\n}\n</code></pre></p> </li> </ol>"},{"location":"part4/#5-configure-the-mkdocs-project","title":"5. Configure the MkDocs Project","text":"<p>Open the newly created <code>mkdocs.yml</code> file in VS Code. </p> <p>Add the following basic\u00a0<code>mkdocs.yml</code>\u00a0configuration: <pre><code>site_name: My MkDocs Material Documentation\nsite_url: https://sitename.example\ntheme:\n  name: material\n</code></pre></p> <p>Warning</p> <p>The <code>site_url</code> setting is important because by default, MkDocs assumes your site is at the root of your domain. This is often not the case, especially when using GitHub Pages without a custom domain. For this reason, and because some plugins require it, it's a best practice to always set the <code>site_url</code>.</p>"},{"location":"part4/#6-run-the-site-locally","title":"6. Run the Site Locally","text":"<p>Run the following command to launch a local development server, so you can preview your documentation site in your browser.</p> <pre><code>mkdocs serve\n</code></pre> <p>This command starts a local development server (usually at http://127.0.0.1:8000). </p> <p>To view your site, <code>Ctrl+Click</code> the link in your terminal or copy and paste it into your browser\u2014it updates automatically as you make changes.</p> <p>Tips for Your Workflow</p> <ul> <li>Stop the server : To stop the server at any time, press <code>Ctrl+C</code> in the terminal.</li> <li>Deactivate the virtual environment: When you are done with your work, deactivate the virtual environment by simply running deactivate.</li> <li>Reactivate later: When you return to your project, navigate to the project directory and reactivate the environment with <code>source venv/bin/activate</code>.</li> </ul>"},{"location":"part4/#7-basic-customization","title":"7. Basic Customization","text":"<p>Your new site is now up and running with the Material for MkDocs theme. You can begin customizing your project by modifying the <code>mkdocs.yml</code> file. </p> <p>For advanced configuration options and detailed customization, you can refer to the Material for MkDocs official documentation.</p> <p>With your project structure and configuration now in place, you are ready to move on to the next section and publish your site using GitHub Pages.</p> <p>\u2b05\ufe0f Previous: Installing MkDocs and Material for MkDocs \u00a0\u00a0\u00a0\u00a0 \u27a1\ufe0f Next: Deploying the Site with GitHub Actions</p>"},{"location":"part5/","title":"Part 5: Deploying the Site with GitHub Actions","text":"<p>To make your MkDocs site live, you\u2019ll publish it to GitHub Pages. This section walks you through setting up a GitHub repository and automating the deployment process using GitHub Actions.</p>"},{"location":"part5/#1-create-the-github-actions-workflow-file","title":"1. Create the GitHub Actions Workflow File","text":"<p>In Visual Studio Code:</p> <ol> <li>In your project's root directory, create a new folder named <code>.github</code>.</li> <li>Inside the <code>.github</code> folder, create another folder named <code>workflows</code>.</li> <li>Inside the <code>workflows</code> folder, create a file named <code>ci.yml</code> and paste in the following code:</li> </ol> ci.yml<pre><code>name: ci\non:\n  push:\n    branches:\n      - master\n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Configure Git Credentials\n        run: |\n          git config user.name github-actions[bot]\n          git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n      - uses: actions/setup-python@v5\n        with:\n          python-version: 3.x\n      - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV\n      - uses: actions/cache@v4\n        with:\n          key: mkdocs-material-${{ env.cache_id }}\n          path: .cache\n          restore-keys: |\n            mkdocs-material-\n      - run: pip install mkdocs-material\n      - run: mkdocs gh-deploy --force\n</code></pre> <p>Warning</p> <p>The file path must be exactly .github/workflows/ci.yml for GitHub to recognize it.</p>"},{"location":"part5/#2-create-a-new-github-repository","title":"2. Create a New GitHub Repository","text":"<p>Go to github and create a new repository (public repository).</p> <p>Warning</p> <p>Do not initialize it with a <code>README</code> or <code>license</code>.</p>"},{"location":"part5/#3-link-your-local-project-to-the-repository","title":"3. Link Your Local Project to the Repository","text":"<p>Before you proceed, stop the local server by pressing <code>Ctrl+C</code> in your terminal. </p>"},{"location":"part5/#31-create-a-gitignore-file","title":"3.1 Create a .gitignore File","text":"<p>Create a new file named <code>.gitignore</code> in your project's root directory and add in the following content in it. <pre><code># Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n</code></pre></p> <p>This file tells Git to ignore certain files and folders, preventing them from being committed to your repository.</p>"},{"location":"part5/#32-initialize-the-repository","title":"3.2 Initialize the Repository","text":"<p>Now, initialize a Git repository in your project folder and push your code to a new repository on GitHub.</p> <pre><code># Initializes a new Git repository.\ngit init\n\n# Stages all the files, including the new .github folder.\ngit add .\n\n# Shows which files are about to be committed.\ngit status\n\n# Creates the first commit.\ngit commit -m \"Initial commit of MkDocs project.\"\n\n# Connects your local repository to a remote repository on GitHub.\n# (Paste the remote URL from your new GitHub repository in the below command.) \ngit remote add origin https://github.com/your-username/your-repo-name.git\n\n\n# Pushes your code to the 'main' branch on GitHub.\ngit push -u origin main\n</code></pre> <p>Go to your GitHub repository and refresh the page to see your files.</p>"},{"location":"part5/#4-configure-github-pages","title":"4. Configure GitHub Pages","text":"<ol> <li>On your GitHub repository, go to Settings &gt; Pages.</li> <li>Under Source, select:<ul> <li>Deploy from a branch</li> <li>Branch: gh-pages</li> </ul> </li> <li>Save your changes.</li> </ol>"},{"location":"part5/#5-watch-the-action-deploy-your-site","title":"5. Watch the Action Deploy Your Site","text":"<p>GitHub Actions will automatically build and deploy your site.</p> <p>The deployment may take a couple of minutes \u2014 once complete, a live URL will appear under Settings \u2192 Pages, which you can click to view your published site.</p>"},{"location":"part5/#conclusion","title":"Conclusion","text":"<p>You\u2019ve successfully completed the setup. </p> <p>Your documentation site is now fully functional, version-controlled, and hosted using GitHub Pages. With this foundation in place, you can confidently add new content, customize the theme, and manage updates with ease.</p> <p>\u2b05\ufe0f Previous: Create and Configure the Project</p>"}]}